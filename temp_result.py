Import(names=[alias(name='sys')])
Import(names=[alias(name='os')])
Assign(targets=[Name(id='current_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='parent_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='current_dir', ctx=Load())], keywords=[]))
Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), attr='append', ctx=Load())(parent_dir)
ImportFrom(module='tomok.core.rule_unit', names=[alias(name='RuleUnit')], level=0)
ImportFrom(module='tomok.core.decorator', names=[alias(name='rule_method')], level=0)
Import(names=[alias(name='math')])
ImportFrom(module='typing', names=[alias(name='List')], level=0)
ClassDef(name='KDS241011_04060702_01', bases=[Name(id='RuleUnit', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='priority', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='author', ctx=Store())], value=Constant(value='Jong Hyeok')), Assign(targets=[Name(id='ref_code', ctx=Store())], value=Constant(value='KDS 24 10 11 4.6.7.2 (1)')), Assign(targets=[Name(id='ref_date', ctx=Store())], value=Constant(value='2021-04-15')), Assign(targets=[Name(id='doc_date', ctx=Store())], value=Constant(value='2023-11-09')), Assign(targets=[Name(id='title', ctx=Store())], value=Constant(value='플랜지 유효폭')), Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value='\n    교량 설계 일반사항(한계상태설계법)\n    4. 구조해석\n    4.6 정적 해석\n    4.6.7 플랜지 유효폭\n    4.6.7.2 박스형 세그멘탈 콘크리트 보 및 단 격실 박스형 현장타설 콘크리트 보\n    (1)\n    ')), Assign(targets=[Name(id='content', ctx=Store())], value=Constant(value='\n\n    ')), Assign(targets=[Name(id='flowchart', ctx=Store())], value=Constant(value='\n    flowchart TD\n        subgraph Python_Class\n        A[플렌지 유효폭];\n        B["KDS 24 10 11 4.6.7.2 (1)"];\n        A ~~~ B\n        end\n    subgraph Variable_def\n    VarOut[/출력변수 : 플랜지 유효폭/];\n    VarIn1[/입력변수 : 복부판 어느 한쪽으로의 플랜지폭/];\n    VarIn2[/입력변수 : 표 4.6-14에서 저으이된 bs와 bm을 결정하기 위해 그림 4.6.8에 규정된 지간장/];\n    VarIn3[/입력변수 : 상부구조물의 높이/];\n    VarIn4[/입력변수 : 특별한 지점단면의 플랜지 유효폭/];\n    VarIn5[/입력변수 : 경간의 내부구간에서의 플랜지 유효폭/];\n    VarIn6[/입력변수 : 내부지점 또는 캔틸레버 구간에서의 플랜지 유효폭/];\n    VarIn7[/입력변수 : 그림 4.6-6에 보인 바와 같이 복부판 각면의 플랜지폭과 지간길이의 1/4중에서 작은값을 플랜지 유효폭으로 취했을 경우 유효폭이 변화되는 지간부위/];\n    VarOut~~~VarIn3~~~VarIn6\n    VarIn1~~~VarIn4~~~VarIn7\n    VarIn2~~~VarIn5~~~VarIn7\n    end\n    Python_Class~~~Variable_def\n    D{"<img src=\'https://latex.codecogs.com/svg.image?b\\leq&space;0.1l_{i}and&space;b\\leq&space;0.3d_{o}\'>-----------------------------------------"};\n    E["플랜지 유효폭=실제 플랜지 폭"];\n    F["표 4.6-14,그림 4.6-7~4.6-9에 규정된 폭 참고"];\n    G(["플랜지 유효폭"]);\n    Variable_def--->D--Yes--->E--->G\n    D--No--->F--->G\n    ')), FunctionDef(name='effective_length_of_flange', args=arguments(posonlyargs=[], args=[arg(arg='fIWactfl'), arg(arg='fIdo'), arg(arg='fIb'), arg(arg='fIbe'), arg(arg='fIbm'), arg(arg='fIbs'), arg(arg='fIli'), arg(arg='fOWefffl')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='플랜지 유효폭\n        Args:\n            fIWactfl (float): 실제 플랜지의 폭\n            fIdo (float): 상부구조물의 높이\n            fIb (float): 복부판 어느 한쪽으로의 플랜지폭\n            fIbe (float): 표 4.6-14에서 결정되어지는 경간내의 특별한 지점단면의 플랜지 유효폭\n            fIbm (float): 그림 4.6-7에서 결정된 경간의 내부 구간에서의 플랜지 유효폭\n            fIbs (float): 그림 4.6-7에서 결정된 내부지점 혹은 캔틸레버 구간에서의 플랜지 유효폭\n            fIli (float): 표 4.6-14에서 정의된  및 을 결정하기 위해 그림 4.6.8에 규정된 지간장\n            fOWefffl (float): 플랜지 유효폭\n        Returns:\n            float: 교량 설계 일반사항(한계상태설계법) 4.6.7.2 박스형 세그멘탈 콘크리트 보 및 단 격실 박스형 현장타설 콘크리트 보 (1)의 값\n        ')), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='fIb', ctx=Load()), ops=[LtE()], comparators=[BinOp(left=Constant(value=0.1), op=Mult(), right=Name(id='fIli', ctx=Load()))]), Compare(left=Name(id='fIb', ctx=Load()), ops=[LtE()], comparators=[BinOp(left=Constant(value=0.3), op=Mult(), right=Name(id='fIdo', ctx=Load()))])]), body=[Assign(targets=[Name(id='fOWefffl', ctx=Store())], value=Name(id='fIWactfl', ctx=Load())), Return(value=Name(id='fOWefffl', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='fIbe', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='fOWefffl', ctx=Store())], value=Name(id='fIb', ctx=Load())), Return(value=Name(id='fOWefffl', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='fIbm', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='fOWefffl', ctx=Store())], value=Name(id='fIbm', ctx=Load())), Return(value=Name(id='fOWefffl', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='fIbs', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='fOWefffl', ctx=Store())], value=Name(id='fIbs', ctx=Load())), Return(value=Name(id='fOWefffl', ctx=Load()))], orelse=[])])], decorator_list=[Name(id='rule_method', ctx=Load())], returns=Name(id='float', ctx=Load()))], decorator_list=[])